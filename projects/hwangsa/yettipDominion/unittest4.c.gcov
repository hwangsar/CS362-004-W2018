        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:int failure_count = 0;
        -:    9:
        5:   10:void assertTrue(int a, int b) {
        5:   11:	if (a == b) {
        5:   12:		printf("Test: Pass\n");
        -:   13:	}
        -:   14:	else {
    #####:   15:		printf("Test: Fail\n");
    #####:   16:		failure_count++;
        -:   17:	}
        5:   18:}
        -:   19:
        1:   20:int main() {
        1:   21:	int num_players = 2;
        -:   22:
        -:   23:	// kingdom cards
        1:   24:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   25:	int seed = 2000;
        -:   26:	struct gameState state;
        -:   27:
        1:   28:	printf("Testing: gainCard()\n");
        1:   29:	memset(&state,23,sizeof(struct gameState));
        1:   30:	initializeGame(num_players, k, seed, &state);
        -:   31:
        1:   32:	printf("\nGold supply pile is empty\n");
        1:   33:	state.supplyCount[gold] = 0;
        1:   34:	assertTrue(gainCard(gold,&state,0,0),-1);
        1:   35:	state.supplyCount[gold] = 30;
        -:   36:
        1:   37:	printf("\nAdd card to deck\n");
        1:   38:	int deckCount = state.deckCount[0];
        1:   39:	gainCard(gold,&state,1,0);
        1:   40:	assertTrue(deckCount+1, state.deckCount[0]);
        -:   41:
        1:   42:	printf("\nAdd card to hand\n");
        1:   43:	int handCount = state.handCount[0];
        1:   44:	gainCard(gold,&state,2,0);
        1:   45:	assertTrue(handCount+1, state.handCount[0]);
        -:   46:
        1:   47:	printf("\nAdd card to discarded pile\n");
        1:   48:	int discardCount = state.discardCount[0];
        1:   49:	gainCard(gold,&state,0,0);
        1:   50:	assertTrue(discardCount+1, state.discardCount[0]);
        -:   51:
        1:   52:	printf("\nDecrease gold supply\n");
        1:   53:	int goldSupply = state.supplyCount[gold];
        1:   54:	gainCard(gold,&state,0,0);
        1:   55:	assertTrue(goldSupply-1,state.supplyCount[gold]);
        -:   56:
        1:   57:	if(failure_count) {
    #####:   58:		printf("\nTest: Fail\n");
    #####:   59:		printf("Failures: %d\n", failure_count);
        -:   60:	}
        -:   61:	else {
        1:   62:		printf("\nTest: Passed and Completed\n\n");
        -:   63:	}
        -:   64:
        1:   65:	return 0;
        -:   66:}
