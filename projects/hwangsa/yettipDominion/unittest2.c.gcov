        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:int failure_count = 0;
        -:    9:
        3:   10:void assertTrue(int a, int b) {
        3:   11:	if (a == b) {
        3:   12:		printf("Test: Pass\n");
        -:   13:	}
        -:   14:	else {
    #####:   15:		printf("Test: Fail\n");
    #####:   16:		failure_count++;
        -:   17:	}
        3:   18:}
        -:   19:
        1:   20:int main() {
        1:   21:	int num_players = 2;
        1:   22:	int player = 0;
        -:   23:
        -:   24:	// kingdom cards
        1:   25:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   26:	int seed = 2000;
        -:   27:	struct gameState state;
        -:   28:
        1:   29:	printf("Testing: shuffle()\n");
        -:   30:
        1:   31:	memset(&state,23,sizeof(struct gameState));
        1:   32:	initializeGame(num_players, k, seed, &state);
        -:   33:
        1:   34:	state.deckCount[player] = 0;
        1:   35:	printf("\nDeck count = 0\n");
        1:   36:	assertTrue(shuffle(player,&state),-1);
        -:   37:
        1:   38:	printf("\nDeck count = 10 before and after shuffling\n");
        1:   39:	state.deckCount[player] = 10;
        1:   40:	shuffle(player, &state);
        1:   41:	assertTrue(state.deckCount[player],10);
        -:   42:
        1:   43:	printf("\nCards are shuffled\n");
        -:   44:
        1:   45:	int pre_shuffle = state.deck[player][0];
        1:   46:	shuffle(player,&state);
        1:   47:	int post_shuffle = state.deck[player][0];
        -:   48:
        1:   49:	if(pre_shuffle != post_shuffle) {
        1:   50:		assertTrue(1,1);
        -:   51:	}
        -:   52:	else {
    #####:   53:		assertTrue(0,1);
        -:   54:	}
        -:   55:
        1:   56:	if(failure_count) {
    #####:   57:		printf("\nTest: Fail\n");
    #####:   58:		printf("Failures: %d\n", failure_count);
        -:   59:	}
        -:   60:	else {
        1:   61:		printf("\nTest: Passed and Completed\n\n");
        -:   62:	}
        -:   63:
        1:   64:	return 0;
        -:   65:}
