        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <time.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11:// fail counters
        -:   12:int failc_effect = 0;
        -:   13:int failc_draw = 0;
        -:   14:int failc_discard = 0;
        -:   15:int failc_deckhandcount = 0;
        -:   16:
        -:   17:// function to test smithy card
    10000:   18:void test_smithy(int x, struct gameState *post) {
        -:   19:	int fx, d1, d2, d3, discard;
    10000:   20:	int bonus = 0;
        -:   21:
        -:   22:	// manually act on function's actions
        -:   23:	struct gameState pre;
        -:   24:
        -:   25:	// copy game state to pre
    10000:   26:	memcpy(&pre, post, sizeof(struct gameState));
        -:   27:	
        -:   28:	// call card effect function with smithy card
    10000:   29:	fx = cardEffect(smithy, 0, 0, 0, post, 0, &bonus);
        -:   30:
        -:   31:	// call draw 3x
    10000:   32:	d1 = drawCard(x, &pre);
    10000:   33:	d2 = drawCard(x, &pre);
    10000:   34:	d3 = drawCard(x, &pre);
        -:   35:
        -:   36:	// call discard
    10000:   37:	discard = discardCard(0, x, &pre, 0);
        -:   38:
        -:   39:	// get hand/deck counts
    10000:   40:	int post_hand = post->handCount[x];
    10000:   41:	int post_deck = post->deckCount[x];
    10000:   42:	int pre_hand = pre.handCount[x];
    10000:   43:	int pre_deck = pre.deckCount[x];
        -:   44:
        -:   45:	// check draws
    10000:   46:	if (d1 == -1 && pre.deckCount[x] != 0) {
    #####:   47:		failc_draw++;
        -:   48:	}
    10000:   49:	if (d2 == -1 && pre.deckCount[x] != 0) {
    #####:   50:		failc_draw++;
        -:   51:	}
    10000:   52:	if (d3 == -1 && pre.deckCount[x] != 0) {
    #####:   53:		failc_draw++;
        -:   54:	}
        -:   55:
        -:   56:	// check card effect and discard 
    10000:   57:	if (!(fx == 0 && discard == 0)) {
    #####:   58:		if (fx) {
    #####:   59:			failc_effect++;
        -:   60:		}
    #####:   61:		if (discard) {
    #####:   62:			failc_discard++;
        -:   63:		}
        -:   64:	}
        -:   65:
        -:   66:	// check hand/deck counts
    10000:   67:	if (!(post_hand == pre_hand && post_deck == pre_deck)) {
     9999:   68:		failc_deckhandcount++;
        -:   69:	}
    10000:   70:}
        -:   71:
        1:   72:int main() {
        1:   73:	printf("Random Test\n");
        1:   74:	printf("randomcardtest2.c");
        1:   75:	printf("smithyCard()\n\n");
        -:   76:
        1:   77:	int loop = 10000;
        -:   78:	int i, j, player;
        -:   79:	struct gameState test;
        1:   80:	srand(time(NULL));
        -:   81:
        -:   82:	// randomly initialize game state
    10001:   83:	for (i = 0; i < loop; i++) {
263010000:   84:		for (j = 0; j < sizeof(struct gameState); j++) {
263000000:   85:			((char*)&test)[j] = floor(Random() * 256);
        -:   86:		}
        -:   87:
        -:   88:		// randomly select vals
    10000:   89:		player = floor(Random() * MAX_PLAYERS);
    10000:   90:		test.deckCount[player] = floor(Random() * MAX_DECK);
    10000:   91:		test.discardCount[player] = floor(Random() * MAX_DECK);
    10000:   92:		test.handCount[player] = floor(Random() * MAX_HAND);
    10000:   93:		test.playedCardCount = floor(Random() * (MAX_DECK - 1));
    10000:   94:		test.whoseTurn = player;
        -:   95:
        -:   96:		// call test function
    10000:   97:		test_smithy(player, &test);
        -:   98:	}
        -:   99:
        1:  100:	int failc_total = failc_effect + failc_draw + failc_discard + failc_deckhandcount;
        -:  101:
        1:  102:	printf("\nTest Results:\n");
        1:  103:	printf("Passed Tests: %d\n", loop - failc_total);
        1:  104:	printf("Failed Tests: %d\n", failc_total);
        -:  105:
        1:  106:	if (failc_total == 0) {
    #####:  107:		printf("Random Test Successfully Passed\n\n");
        -:  108:	}
        -:  109:	else {
        1:  110:		printf("\nRandom Test Failed\n");
        1:  111:		printf("cardEffect() failed: %d\n", failc_effect);
        1:  112:		printf("drawCard() failed: %d\n", failc_draw);
        1:  113:		printf("discardCard() failed %d\n", failc_discard);
        1:  114:		printf("Hand/Deck count mismatch: %d\n\n", failc_deckhandcount);
        -:  115:	}
        -:  116:	
        1:  117:	printf("Coverage\n");
        -:  118:
        1:  119:	return 0;
        -:  120:}
